/* 
 * Kadaster - BRK-Bevragen API
 *
 * D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie. 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Filiatie
    /// </summary>
    [DataContract]
    public partial class Filiatie :  IEquatable<Filiatie>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Filiatie" /> class.
        /// </summary>
        /// <param name="aard">aard.</param>
        /// <param name="overgangsgrootte">De oppervlakte van het gedeelte van het oude perceel dat is opgegaan in de nieuwe Onroerende zaak. .</param>
        /// <param name="kadastraalOnroerendeZaakIdentificatie">De identificatie(s) van de Kadastraal Onroerende Za(a)k(en). .</param>
        /// <param name="indicatieVervallenKadastraalOnroerendeZaak">Geeft aan of de filiatie verwijst naar een vervallen kadastraal onroerende zaak. .</param>
        public Filiatie(Waardelijst aard = default(Waardelijst), int overgangsgrootte = default(int), string kadastraalOnroerendeZaakIdentificatie = default(string), bool indicatieVervallenKadastraalOnroerendeZaak = default(bool))
        {
            this.Aard = aard;
            this.Overgangsgrootte = overgangsgrootte;
            this.KadastraalOnroerendeZaakIdentificatie = kadastraalOnroerendeZaakIdentificatie;
            this.IndicatieVervallenKadastraalOnroerendeZaak = indicatieVervallenKadastraalOnroerendeZaak;
        }
        
        /// <summary>
        /// Gets or Sets Aard
        /// </summary>
        [DataMember(Name="aard", EmitDefaultValue=false)]
        public Waardelijst Aard { get; set; }

        /// <summary>
        /// De oppervlakte van het gedeelte van het oude perceel dat is opgegaan in de nieuwe Onroerende zaak. 
        /// </summary>
        /// <value>De oppervlakte van het gedeelte van het oude perceel dat is opgegaan in de nieuwe Onroerende zaak. </value>
        [DataMember(Name="overgangsgrootte", EmitDefaultValue=false)]
        public int Overgangsgrootte { get; set; }

        /// <summary>
        /// De identificatie(s) van de Kadastraal Onroerende Za(a)k(en). 
        /// </summary>
        /// <value>De identificatie(s) van de Kadastraal Onroerende Za(a)k(en). </value>
        [DataMember(Name="kadastraalOnroerendeZaakIdentificatie", EmitDefaultValue=false)]
        public string KadastraalOnroerendeZaakIdentificatie { get; set; }

        /// <summary>
        /// Geeft aan of de filiatie verwijst naar een vervallen kadastraal onroerende zaak. 
        /// </summary>
        /// <value>Geeft aan of de filiatie verwijst naar een vervallen kadastraal onroerende zaak. </value>
        [DataMember(Name="indicatieVervallenKadastraalOnroerendeZaak", EmitDefaultValue=false)]
        public bool IndicatieVervallenKadastraalOnroerendeZaak { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Filiatie {\n");
            sb.Append("  Aard: ").Append(Aard).Append("\n");
            sb.Append("  Overgangsgrootte: ").Append(Overgangsgrootte).Append("\n");
            sb.Append("  KadastraalOnroerendeZaakIdentificatie: ").Append(KadastraalOnroerendeZaakIdentificatie).Append("\n");
            sb.Append("  IndicatieVervallenKadastraalOnroerendeZaak: ").Append(IndicatieVervallenKadastraalOnroerendeZaak).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Filiatie);
        }

        /// <summary>
        /// Returns true if Filiatie instances are equal
        /// </summary>
        /// <param name="input">Instance of Filiatie to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Filiatie input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aard == input.Aard ||
                    (this.Aard != null &&
                    this.Aard.Equals(input.Aard))
                ) && 
                (
                    this.Overgangsgrootte == input.Overgangsgrootte ||
                    this.Overgangsgrootte.Equals(input.Overgangsgrootte)
                ) && 
                (
                    this.KadastraalOnroerendeZaakIdentificatie == input.KadastraalOnroerendeZaakIdentificatie ||
                    (this.KadastraalOnroerendeZaakIdentificatie != null &&
                    this.KadastraalOnroerendeZaakIdentificatie.Equals(input.KadastraalOnroerendeZaakIdentificatie))
                ) && 
                (
                    this.IndicatieVervallenKadastraalOnroerendeZaak == input.IndicatieVervallenKadastraalOnroerendeZaak ||
                    this.IndicatieVervallenKadastraalOnroerendeZaak.Equals(input.IndicatieVervallenKadastraalOnroerendeZaak)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aard != null)
                    hashCode = hashCode * 59 + this.Aard.GetHashCode();
                hashCode = hashCode * 59 + this.Overgangsgrootte.GetHashCode();
                if (this.KadastraalOnroerendeZaakIdentificatie != null)
                    hashCode = hashCode * 59 + this.KadastraalOnroerendeZaakIdentificatie.GetHashCode();
                hashCode = hashCode * 59 + this.IndicatieVervallenKadastraalOnroerendeZaak.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
