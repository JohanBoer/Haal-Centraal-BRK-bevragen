# coding: utf-8

"""
    Kadastraal onroerende zaken

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Tenaamstelling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aandeel': 'TypeBreuk',
        'burgerlijke_staat_ten_tijde_van_verkrijging': 'Waardelijst',
        'verkregen_namens_samenwerkingsverband': 'Waardelijst',
        'aantekeningen': 'list[Aantekening]',
        'gezamenlijk_aandeel': 'TypeBreuk',
        'betrokken_partner': 'NatuurlijkPersoonBeperkt',
        'betrokken_samenwerkingsverband': 'NietNatuurlijkPersoonBeperkt',
        'betrokken_gorzen_en_aanwassen': 'NietNatuurlijkPersoonBeperkt'
    }

    attribute_map = {
        'aandeel': 'aandeel',
        'burgerlijke_staat_ten_tijde_van_verkrijging': 'burgerlijkeStaatTenTijdeVanVerkrijging',
        'verkregen_namens_samenwerkingsverband': 'verkregenNamensSamenwerkingsverband',
        'aantekeningen': 'aantekeningen',
        'gezamenlijk_aandeel': 'gezamenlijkAandeel',
        'betrokken_partner': 'betrokkenPartner',
        'betrokken_samenwerkingsverband': 'betrokkenSamenwerkingsverband',
        'betrokken_gorzen_en_aanwassen': 'betrokkenGorzenEnAanwassen'
    }

    def __init__(self, aandeel=None, burgerlijke_staat_ten_tijde_van_verkrijging=None, verkregen_namens_samenwerkingsverband=None, aantekeningen=None, gezamenlijk_aandeel=None, betrokken_partner=None, betrokken_samenwerkingsverband=None, betrokken_gorzen_en_aanwassen=None):  # noqa: E501
        """Tenaamstelling - a model defined in Swagger"""  # noqa: E501
        self._aandeel = None
        self._burgerlijke_staat_ten_tijde_van_verkrijging = None
        self._verkregen_namens_samenwerkingsverband = None
        self._aantekeningen = None
        self._gezamenlijk_aandeel = None
        self._betrokken_partner = None
        self._betrokken_samenwerkingsverband = None
        self._betrokken_gorzen_en_aanwassen = None
        self.discriminator = None
        if aandeel is not None:
            self.aandeel = aandeel
        if burgerlijke_staat_ten_tijde_van_verkrijging is not None:
            self.burgerlijke_staat_ten_tijde_van_verkrijging = burgerlijke_staat_ten_tijde_van_verkrijging
        if verkregen_namens_samenwerkingsverband is not None:
            self.verkregen_namens_samenwerkingsverband = verkregen_namens_samenwerkingsverband
        if aantekeningen is not None:
            self.aantekeningen = aantekeningen
        if gezamenlijk_aandeel is not None:
            self.gezamenlijk_aandeel = gezamenlijk_aandeel
        if betrokken_partner is not None:
            self.betrokken_partner = betrokken_partner
        if betrokken_samenwerkingsverband is not None:
            self.betrokken_samenwerkingsverband = betrokken_samenwerkingsverband
        if betrokken_gorzen_en_aanwassen is not None:
            self.betrokken_gorzen_en_aanwassen = betrokken_gorzen_en_aanwassen

    @property
    def aandeel(self):
        """Gets the aandeel of this Tenaamstelling.  # noqa: E501


        :return: The aandeel of this Tenaamstelling.  # noqa: E501
        :rtype: TypeBreuk
        """
        return self._aandeel

    @aandeel.setter
    def aandeel(self, aandeel):
        """Sets the aandeel of this Tenaamstelling.


        :param aandeel: The aandeel of this Tenaamstelling.  # noqa: E501
        :type: TypeBreuk
        """

        self._aandeel = aandeel

    @property
    def burgerlijke_staat_ten_tijde_van_verkrijging(self):
        """Gets the burgerlijke_staat_ten_tijde_van_verkrijging of this Tenaamstelling.  # noqa: E501


        :return: The burgerlijke_staat_ten_tijde_van_verkrijging of this Tenaamstelling.  # noqa: E501
        :rtype: Waardelijst
        """
        return self._burgerlijke_staat_ten_tijde_van_verkrijging

    @burgerlijke_staat_ten_tijde_van_verkrijging.setter
    def burgerlijke_staat_ten_tijde_van_verkrijging(self, burgerlijke_staat_ten_tijde_van_verkrijging):
        """Sets the burgerlijke_staat_ten_tijde_van_verkrijging of this Tenaamstelling.


        :param burgerlijke_staat_ten_tijde_van_verkrijging: The burgerlijke_staat_ten_tijde_van_verkrijging of this Tenaamstelling.  # noqa: E501
        :type: Waardelijst
        """

        self._burgerlijke_staat_ten_tijde_van_verkrijging = burgerlijke_staat_ten_tijde_van_verkrijging

    @property
    def verkregen_namens_samenwerkingsverband(self):
        """Gets the verkregen_namens_samenwerkingsverband of this Tenaamstelling.  # noqa: E501


        :return: The verkregen_namens_samenwerkingsverband of this Tenaamstelling.  # noqa: E501
        :rtype: Waardelijst
        """
        return self._verkregen_namens_samenwerkingsverband

    @verkregen_namens_samenwerkingsverband.setter
    def verkregen_namens_samenwerkingsverband(self, verkregen_namens_samenwerkingsverband):
        """Sets the verkregen_namens_samenwerkingsverband of this Tenaamstelling.


        :param verkregen_namens_samenwerkingsverband: The verkregen_namens_samenwerkingsverband of this Tenaamstelling.  # noqa: E501
        :type: Waardelijst
        """

        self._verkregen_namens_samenwerkingsverband = verkregen_namens_samenwerkingsverband

    @property
    def aantekeningen(self):
        """Gets the aantekeningen of this Tenaamstelling.  # noqa: E501

        Een aantekening is een verwijzing naar een ter inschrijving aangeboden stuk. Een aantekening op een tenaamstelling van een zakelijk recht is meestal een beperking. Bijvoorbeeld de verkrijging van een aandeel in een zakelijk recht onder opschortende voorwaarde, een beperking van de handelingsbevoegdheid van de zakelijk gerechtigde, of een koopovereenkomst  # noqa: E501

        :return: The aantekeningen of this Tenaamstelling.  # noqa: E501
        :rtype: list[Aantekening]
        """
        return self._aantekeningen

    @aantekeningen.setter
    def aantekeningen(self, aantekeningen):
        """Sets the aantekeningen of this Tenaamstelling.

        Een aantekening is een verwijzing naar een ter inschrijving aangeboden stuk. Een aantekening op een tenaamstelling van een zakelijk recht is meestal een beperking. Bijvoorbeeld de verkrijging van een aandeel in een zakelijk recht onder opschortende voorwaarde, een beperking van de handelingsbevoegdheid van de zakelijk gerechtigde, of een koopovereenkomst  # noqa: E501

        :param aantekeningen: The aantekeningen of this Tenaamstelling.  # noqa: E501
        :type: list[Aantekening]
        """

        self._aantekeningen = aantekeningen

    @property
    def gezamenlijk_aandeel(self):
        """Gets the gezamenlijk_aandeel of this Tenaamstelling.  # noqa: E501


        :return: The gezamenlijk_aandeel of this Tenaamstelling.  # noqa: E501
        :rtype: TypeBreuk
        """
        return self._gezamenlijk_aandeel

    @gezamenlijk_aandeel.setter
    def gezamenlijk_aandeel(self, gezamenlijk_aandeel):
        """Sets the gezamenlijk_aandeel of this Tenaamstelling.


        :param gezamenlijk_aandeel: The gezamenlijk_aandeel of this Tenaamstelling.  # noqa: E501
        :type: TypeBreuk
        """

        self._gezamenlijk_aandeel = gezamenlijk_aandeel

    @property
    def betrokken_partner(self):
        """Gets the betrokken_partner of this Tenaamstelling.  # noqa: E501


        :return: The betrokken_partner of this Tenaamstelling.  # noqa: E501
        :rtype: NatuurlijkPersoonBeperkt
        """
        return self._betrokken_partner

    @betrokken_partner.setter
    def betrokken_partner(self, betrokken_partner):
        """Sets the betrokken_partner of this Tenaamstelling.


        :param betrokken_partner: The betrokken_partner of this Tenaamstelling.  # noqa: E501
        :type: NatuurlijkPersoonBeperkt
        """

        self._betrokken_partner = betrokken_partner

    @property
    def betrokken_samenwerkingsverband(self):
        """Gets the betrokken_samenwerkingsverband of this Tenaamstelling.  # noqa: E501


        :return: The betrokken_samenwerkingsverband of this Tenaamstelling.  # noqa: E501
        :rtype: NietNatuurlijkPersoonBeperkt
        """
        return self._betrokken_samenwerkingsverband

    @betrokken_samenwerkingsverband.setter
    def betrokken_samenwerkingsverband(self, betrokken_samenwerkingsverband):
        """Sets the betrokken_samenwerkingsverband of this Tenaamstelling.


        :param betrokken_samenwerkingsverband: The betrokken_samenwerkingsverband of this Tenaamstelling.  # noqa: E501
        :type: NietNatuurlijkPersoonBeperkt
        """

        self._betrokken_samenwerkingsverband = betrokken_samenwerkingsverband

    @property
    def betrokken_gorzen_en_aanwassen(self):
        """Gets the betrokken_gorzen_en_aanwassen of this Tenaamstelling.  # noqa: E501


        :return: The betrokken_gorzen_en_aanwassen of this Tenaamstelling.  # noqa: E501
        :rtype: NietNatuurlijkPersoonBeperkt
        """
        return self._betrokken_gorzen_en_aanwassen

    @betrokken_gorzen_en_aanwassen.setter
    def betrokken_gorzen_en_aanwassen(self, betrokken_gorzen_en_aanwassen):
        """Sets the betrokken_gorzen_en_aanwassen of this Tenaamstelling.


        :param betrokken_gorzen_en_aanwassen: The betrokken_gorzen_en_aanwassen of this Tenaamstelling.  # noqa: E501
        :type: NietNatuurlijkPersoonBeperkt
        """

        self._betrokken_gorzen_en_aanwassen = betrokken_gorzen_en_aanwassen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tenaamstelling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenaamstelling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
