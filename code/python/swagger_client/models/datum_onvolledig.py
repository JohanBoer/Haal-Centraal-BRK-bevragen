# coding: utf-8

"""
    Kadastraal onroerende zaken

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DatumOnvolledig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dag': 'int',
        'datum': 'date',
        'jaar': 'int',
        'maand': 'int'
    }

    attribute_map = {
        'dag': 'dag',
        'datum': 'datum',
        'jaar': 'jaar',
        'maand': 'maand'
    }

    def __init__(self, dag=None, datum=None, jaar=None, maand=None):  # noqa: E501
        """DatumOnvolledig - a model defined in Swagger"""  # noqa: E501
        self._dag = None
        self._datum = None
        self._jaar = None
        self._maand = None
        self.discriminator = None
        if dag is not None:
            self.dag = dag
        if datum is not None:
            self.datum = datum
        if jaar is not None:
            self.jaar = jaar
        if maand is not None:
            self.maand = maand

    @property
    def dag(self):
        """Gets the dag of this DatumOnvolledig.  # noqa: E501

        De dag. Als de dag van de datum bekend is wordt deze hier ingevuld. Ook als de volledige datum bekend is.  # noqa: E501

        :return: The dag of this DatumOnvolledig.  # noqa: E501
        :rtype: int
        """
        return self._dag

    @dag.setter
    def dag(self, dag):
        """Sets the dag of this DatumOnvolledig.

        De dag. Als de dag van de datum bekend is wordt deze hier ingevuld. Ook als de volledige datum bekend is.  # noqa: E501

        :param dag: The dag of this DatumOnvolledig.  # noqa: E501
        :type: int
        """

        self._dag = dag

    @property
    def datum(self):
        """Gets the datum of this DatumOnvolledig.  # noqa: E501

        De volledige datum die in de `date` definitie past. Dit element wordt alleen gevuld als de volledige datum bekend is.  # noqa: E501

        :return: The datum of this DatumOnvolledig.  # noqa: E501
        :rtype: date
        """
        return self._datum

    @datum.setter
    def datum(self, datum):
        """Sets the datum of this DatumOnvolledig.

        De volledige datum die in de `date` definitie past. Dit element wordt alleen gevuld als de volledige datum bekend is.  # noqa: E501

        :param datum: The datum of this DatumOnvolledig.  # noqa: E501
        :type: date
        """

        self._datum = datum

    @property
    def jaar(self):
        """Gets the jaar of this DatumOnvolledig.  # noqa: E501

        Het jaar van de datum. Als het jaar bekend is wordt dit element gevuld, ook als de volledige datum bekend is.  # noqa: E501

        :return: The jaar of this DatumOnvolledig.  # noqa: E501
        :rtype: int
        """
        return self._jaar

    @jaar.setter
    def jaar(self, jaar):
        """Sets the jaar of this DatumOnvolledig.

        Het jaar van de datum. Als het jaar bekend is wordt dit element gevuld, ook als de volledige datum bekend is.  # noqa: E501

        :param jaar: The jaar of this DatumOnvolledig.  # noqa: E501
        :type: int
        """

        self._jaar = jaar

    @property
    def maand(self):
        """Gets the maand of this DatumOnvolledig.  # noqa: E501

        De maand. Als de maand van een datum bekend is wordt deze hier ingevuld. Ook als de volledige datum is ingevuld.  # noqa: E501

        :return: The maand of this DatumOnvolledig.  # noqa: E501
        :rtype: int
        """
        return self._maand

    @maand.setter
    def maand(self, maand):
        """Sets the maand of this DatumOnvolledig.

        De maand. Als de maand van een datum bekend is wordt deze hier ingevuld. Ook als de volledige datum is ingevuld.  # noqa: E501

        :param maand: The maand of this DatumOnvolledig.  # noqa: E501
        :type: int
        """

        self._maand = maand

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatumOnvolledig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatumOnvolledig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
