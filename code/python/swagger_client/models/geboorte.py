# coding: utf-8

"""
    Kadastraal onroerende zaken

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Geboorte(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plaats': 'str',
        'datum': 'DatumOnvolledig',
        'land': 'Waardelijst'
    }

    attribute_map = {
        'plaats': 'plaats',
        'datum': 'datum',
        'land': 'land'
    }

    def __init__(self, plaats=None, datum=None, land=None):  # noqa: E501
        """Geboorte - a model defined in Swagger"""  # noqa: E501
        self._plaats = None
        self._datum = None
        self._land = None
        self.discriminator = None
        if plaats is not None:
            self.plaats = plaats
        if datum is not None:
            self.datum = datum
        if land is not None:
            self.land = land

    @property
    def plaats(self):
        """Gets the plaats of this Geboorte.  # noqa: E501

        De geboorteplaats is de plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren  # noqa: E501

        :return: The plaats of this Geboorte.  # noqa: E501
        :rtype: str
        """
        return self._plaats

    @plaats.setter
    def plaats(self, plaats):
        """Sets the plaats of this Geboorte.

        De geboorteplaats is de plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren  # noqa: E501

        :param plaats: The plaats of this Geboorte.  # noqa: E501
        :type: str
        """

        self._plaats = plaats

    @property
    def datum(self):
        """Gets the datum of this Geboorte.  # noqa: E501


        :return: The datum of this Geboorte.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum

    @datum.setter
    def datum(self, datum):
        """Sets the datum of this Geboorte.


        :param datum: The datum of this Geboorte.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum = datum

    @property
    def land(self):
        """Gets the land of this Geboorte.  # noqa: E501


        :return: The land of this Geboorte.  # noqa: E501
        :rtype: Waardelijst
        """
        return self._land

    @land.setter
    def land(self, land):
        """Sets the land of this Geboorte.


        :param land: The land of this Geboorte.  # noqa: E501
        :type: Waardelijst
        """

        self._land = land

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Geboorte, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Geboorte):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
