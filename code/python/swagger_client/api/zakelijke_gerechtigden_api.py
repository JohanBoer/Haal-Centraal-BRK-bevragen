# coding: utf-8

"""
    Kadastraal onroerende zaken

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ZakelijkeGerechtigdenApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_zakelijk_gerechtigde(self, kadastraalonroerendezaakidentificatie, zakelijkgerechtigdeidentificatie, **kwargs):  # noqa: E501
        """get_zakelijk_gerechtigde  # noqa: E501

        Het raadplegen van een specifieke zakelijk gerechtigde van een kadastraal onroerende zaak. Het aandeel van de zakelijk gerechtigde wordt altijd geleverd in combinatie met het gezamenlijk aandeel (wanneer twee of meer personen een gezamenlijk aandeel hebben in een zakelijk recht, en ieders afzonderlijke aandeel in het gezamenlijk aandeel niet bekend is)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zakelijk_gerechtigde(kadastraalonroerendezaakidentificatie, zakelijkgerechtigdeidentificatie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kadastraalonroerendezaakidentificatie: De unieke identificatie van een kadastraal onroerende zaak. (required)
        :param str zakelijkgerechtigdeidentificatie: De identificatie van de zakelijk gerechtigde (required)
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)
        :return: ZakelijkGerechtigdeHal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_zakelijk_gerechtigde_with_http_info(kadastraalonroerendezaakidentificatie, zakelijkgerechtigdeidentificatie, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zakelijk_gerechtigde_with_http_info(kadastraalonroerendezaakidentificatie, zakelijkgerechtigdeidentificatie, **kwargs)  # noqa: E501
            return data

    def get_zakelijk_gerechtigde_with_http_info(self, kadastraalonroerendezaakidentificatie, zakelijkgerechtigdeidentificatie, **kwargs):  # noqa: E501
        """get_zakelijk_gerechtigde  # noqa: E501

        Het raadplegen van een specifieke zakelijk gerechtigde van een kadastraal onroerende zaak. Het aandeel van de zakelijk gerechtigde wordt altijd geleverd in combinatie met het gezamenlijk aandeel (wanneer twee of meer personen een gezamenlijk aandeel hebben in een zakelijk recht, en ieders afzonderlijke aandeel in het gezamenlijk aandeel niet bekend is)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zakelijk_gerechtigde_with_http_info(kadastraalonroerendezaakidentificatie, zakelijkgerechtigdeidentificatie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kadastraalonroerendezaakidentificatie: De unieke identificatie van een kadastraal onroerende zaak. (required)
        :param str zakelijkgerechtigdeidentificatie: De identificatie van de zakelijk gerechtigde (required)
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)
        :return: ZakelijkGerechtigdeHal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['kadastraalonroerendezaakidentificatie', 'zakelijkgerechtigdeidentificatie', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zakelijk_gerechtigde" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'kadastraalonroerendezaakidentificatie' is set
        if ('kadastraalonroerendezaakidentificatie' not in params or
                params['kadastraalonroerendezaakidentificatie'] is None):
            raise ValueError("Missing the required parameter `kadastraalonroerendezaakidentificatie` when calling `get_zakelijk_gerechtigde`")  # noqa: E501
        # verify the required parameter 'zakelijkgerechtigdeidentificatie' is set
        if ('zakelijkgerechtigdeidentificatie' not in params or
                params['zakelijkgerechtigdeidentificatie'] is None):
            raise ValueError("Missing the required parameter `zakelijkgerechtigdeidentificatie` when calling `get_zakelijk_gerechtigde`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kadastraalonroerendezaakidentificatie' in params:
            path_params['kadastraalonroerendezaakidentificatie'] = params['kadastraalonroerendezaakidentificatie']  # noqa: E501
        if 'zakelijkgerechtigdeidentificatie' in params:
            path_params['zakelijkgerechtigdeidentificatie'] = params['zakelijkgerechtigdeidentificatie']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kadastraalonroerendezaken/{kadastraalonroerendezaakidentificatie}/zakelijkgerechtigden/{zakelijkgerechtigdeidentificatie}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZakelijkGerechtigdeHal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zakelijk_gerechtigden(self, kadastraalonroerendezaakidentificatie, **kwargs):  # noqa: E501
        """get_zakelijk_gerechtigden  # noqa: E501

        Het zoeken van zakelijk gerechtigden van een kadastraal onroerende zaak. Het aandeel van de zakelijk gerechtigde wordt altijd geleverd in combinatie met het gezamenlijk aandeel (wanneer twee of meer personen een gezamenlijk aandeel hebben in een zakelijk recht, en ieders afzonderlijke aandeel in het gezamenlijk aandeel niet bekend is)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zakelijk_gerechtigden(kadastraalonroerendezaakidentificatie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kadastraalonroerendezaakidentificatie: De unieke identificatie van een kadastraal onroerende zaak. (required)
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)
        :param TypeGerechtigdeEnum typegerechtigde: Het type recht dat de zakelijk gerechtigde heeft op de kadastraal onroerende zaak. De waarden van de typering staan in een waardelijst.
        :return: ZakelijkGerechtigdeHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_zakelijk_gerechtigden_with_http_info(kadastraalonroerendezaakidentificatie, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zakelijk_gerechtigden_with_http_info(kadastraalonroerendezaakidentificatie, **kwargs)  # noqa: E501
            return data

    def get_zakelijk_gerechtigden_with_http_info(self, kadastraalonroerendezaakidentificatie, **kwargs):  # noqa: E501
        """get_zakelijk_gerechtigden  # noqa: E501

        Het zoeken van zakelijk gerechtigden van een kadastraal onroerende zaak. Het aandeel van de zakelijk gerechtigde wordt altijd geleverd in combinatie met het gezamenlijk aandeel (wanneer twee of meer personen een gezamenlijk aandeel hebben in een zakelijk recht, en ieders afzonderlijke aandeel in het gezamenlijk aandeel niet bekend is)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zakelijk_gerechtigden_with_http_info(kadastraalonroerendezaakidentificatie, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kadastraalonroerendezaakidentificatie: De unieke identificatie van een kadastraal onroerende zaak. (required)
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)
        :param TypeGerechtigdeEnum typegerechtigde: Het type recht dat de zakelijk gerechtigde heeft op de kadastraal onroerende zaak. De waarden van de typering staan in een waardelijst.
        :return: ZakelijkGerechtigdeHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['kadastraalonroerendezaakidentificatie', 'fields', 'typegerechtigde']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zakelijk_gerechtigden" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'kadastraalonroerendezaakidentificatie' is set
        if ('kadastraalonroerendezaakidentificatie' not in params or
                params['kadastraalonroerendezaakidentificatie'] is None):
            raise ValueError("Missing the required parameter `kadastraalonroerendezaakidentificatie` when calling `get_zakelijk_gerechtigden`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kadastraalonroerendezaakidentificatie' in params:
            path_params['kadastraalonroerendezaakidentificatie'] = params['kadastraalonroerendezaakidentificatie']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'typegerechtigde' in params:
            query_params.append(('typegerechtigde', params['typegerechtigde']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kadastraalonroerendezaken/{kadastraalonroerendezaakidentificatie}/zakelijkgerechtigden', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZakelijkGerechtigdeHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
