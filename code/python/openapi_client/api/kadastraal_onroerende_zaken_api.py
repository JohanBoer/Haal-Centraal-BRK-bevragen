# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class KadastraalOnroerendeZakenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_kadastraal_onroerende_zaak(self, kadastraalonroerendezaakidentificatie, **kwargs):  # noqa: E501
        """get_kadastraal_onroerende_zaak  # noqa: E501

        Het raadplegen van een kadastrale onroerende zaak.  Met gebruik van de parameter expand kunnen zakelijkgerechtigden direct worden meegeladen.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kadastraal_onroerende_zaak(kadastraalonroerendezaakidentificatie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kadastraalonroerendezaakidentificatie: De unieke identificatie van een kadastraal onroerende zaak. (required)
        :param str accept_crs: Gewenste CRS van de coördinaten in de response.
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KadastraalOnroerendeZaakHal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_kadastraal_onroerende_zaak_with_http_info(kadastraalonroerendezaakidentificatie, **kwargs)  # noqa: E501

    def get_kadastraal_onroerende_zaak_with_http_info(self, kadastraalonroerendezaakidentificatie, **kwargs):  # noqa: E501
        """get_kadastraal_onroerende_zaak  # noqa: E501

        Het raadplegen van een kadastrale onroerende zaak.  Met gebruik van de parameter expand kunnen zakelijkgerechtigden direct worden meegeladen.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kadastraal_onroerende_zaak_with_http_info(kadastraalonroerendezaakidentificatie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kadastraalonroerendezaakidentificatie: De unieke identificatie van een kadastraal onroerende zaak. (required)
        :param str accept_crs: Gewenste CRS van de coördinaten in de response.
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KadastraalOnroerendeZaakHal, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kadastraalonroerendezaakidentificatie',
            'accept_crs',
            'expand',
            'fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kadastraal_onroerende_zaak" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kadastraalonroerendezaakidentificatie' is set
        if self.api_client.client_side_validation and ('kadastraalonroerendezaakidentificatie' not in local_var_params or  # noqa: E501
                                                        local_var_params['kadastraalonroerendezaakidentificatie'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kadastraalonroerendezaakidentificatie` when calling `get_kadastraal_onroerende_zaak`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kadastraalonroerendezaakidentificatie' in local_var_params:
            path_params['kadastraalonroerendezaakidentificatie'] = local_var_params['kadastraalonroerendezaakidentificatie']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params and local_var_params['expand'] is not None:  # noqa: E501
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501

        header_params = {}
        if 'accept_crs' in local_var_params:
            header_params['Accept-Crs'] = local_var_params['accept_crs']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/kadastraalonroerendezaken/{kadastraalonroerendezaakidentificatie}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KadastraalOnroerendeZaakHal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kadastraal_onroerende_zaken(self, **kwargs):  # noqa: E501
        """get_kadastraal_onroerende_zaken  # noqa: E501

        Het zoeken van kadastraal onroerende zaken door een of meer parameters op te geven uit de categorieën kadastrale aanduiding, ingeschreven persoon, kadasterpersoon of Adres. Het combineren van parameters uit verschillende categorieën is niet toegestaan. 1.  Kadastrale aanduiding 2.  Ingeschreven persoon als zakelijk gerechtigde     -  burgerservicenummer (verplicht)     -  typegerechtigde (optioneel) 3.  Niet ingeschreven persoon of niet natuurlijk persoon als zakelijk gerechtigde     -  kadasterpersoonidentificatie (verplicht)     -  typegerechtigde (optioneel) 4.  Adres     -  postcode (verplicht)     -  huisnummer (optioneel)     -  huisletter (optioneel)     -  huisnummertoevoeging (optioneel)  Met gebruik van de parameter expand kunnen zakelijkgerechtigden direct worden meegeladen.  Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kadastraal_onroerende_zaken(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept_crs: Gewenste CRS van de coördinaten in de response.
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)
        :param str kadastrale_aanduiding: Kadastrale aanduiding is een unieke aanduiding van een onroerende zaak. De volgorde waarin deze string wordt opgebouwd is - [Kadastrale gemeente](http://www.kadaster.nl/schemas/waardelijsten/KadastraleGemeente/). - sectie, 1 of 2 hoofdletters - perceelnummer, 1 tot 5 cijfers - appartementsrechtVolgnummer, Hoofdletter A gevolgd door 1 tot 4 cijfers (optioneel)  gescheiden door een spatie
        :param str burgerservicenummer: Het burgerservicenummer van de persoon die een zakelijk recht op een kadastraal onroerende zaak heeft. Deze persoon is zakelijk gerechtigde van de kadastraal onroerende zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param str persoon__identificatie: De identificatie van de Kadasterpersoon, een niet-ingeschreven persoon of een rechtspersoon waarvan de gegevens door het kadaster zijn geregistreerd. Deze persoon is zakelijk gerechtigde van de Kadastraal Onroerende Zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param TypeGerechtigdeEnum zakelijk_gerechtigde__type: Een typering van het recht dat de zakelijkgerechtigde heeft op de Kadastraal Onroerende Zaak. Door het gebruik van deze query-parameter worden Kadastraal Onroerende Zaken geretourneerd waar een recht op rust van het opgegeven type.
        :param str postcode: De postcode van het adres van de objectlocatie van de kadastraal onroerende zaak
        :param int huisnummer: Het huisnummer van het adres van de objectlocatie van de kadastraal onroerende zaak
        :param str huisletter: De huisletter van het adres van de objectlocatie van de kadastraal onroerende zaak
        :param str huisnummertoevoeging: De huisnummertoevoeging van het adres van de objectlocatie van de kadastraal onroerende zaak
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KadastraalOnroerendeZaakHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_kadastraal_onroerende_zaken_with_http_info(**kwargs)  # noqa: E501

    def get_kadastraal_onroerende_zaken_with_http_info(self, **kwargs):  # noqa: E501
        """get_kadastraal_onroerende_zaken  # noqa: E501

        Het zoeken van kadastraal onroerende zaken door een of meer parameters op te geven uit de categorieën kadastrale aanduiding, ingeschreven persoon, kadasterpersoon of Adres. Het combineren van parameters uit verschillende categorieën is niet toegestaan. 1.  Kadastrale aanduiding 2.  Ingeschreven persoon als zakelijk gerechtigde     -  burgerservicenummer (verplicht)     -  typegerechtigde (optioneel) 3.  Niet ingeschreven persoon of niet natuurlijk persoon als zakelijk gerechtigde     -  kadasterpersoonidentificatie (verplicht)     -  typegerechtigde (optioneel) 4.  Adres     -  postcode (verplicht)     -  huisnummer (optioneel)     -  huisletter (optioneel)     -  huisnummertoevoeging (optioneel)  Met gebruik van de parameter expand kunnen zakelijkgerechtigden direct worden meegeladen.  Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kadastraal_onroerende_zaken_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept_crs: Gewenste CRS van de coördinaten in de response.
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)
        :param str kadastrale_aanduiding: Kadastrale aanduiding is een unieke aanduiding van een onroerende zaak. De volgorde waarin deze string wordt opgebouwd is - [Kadastrale gemeente](http://www.kadaster.nl/schemas/waardelijsten/KadastraleGemeente/). - sectie, 1 of 2 hoofdletters - perceelnummer, 1 tot 5 cijfers - appartementsrechtVolgnummer, Hoofdletter A gevolgd door 1 tot 4 cijfers (optioneel)  gescheiden door een spatie
        :param str burgerservicenummer: Het burgerservicenummer van de persoon die een zakelijk recht op een kadastraal onroerende zaak heeft. Deze persoon is zakelijk gerechtigde van de kadastraal onroerende zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param str persoon__identificatie: De identificatie van de Kadasterpersoon, een niet-ingeschreven persoon of een rechtspersoon waarvan de gegevens door het kadaster zijn geregistreerd. Deze persoon is zakelijk gerechtigde van de Kadastraal Onroerende Zaak. Door deze query-parameter te gebruiken worden Kadastraal Onroerende Zaken geretourneerd waar deze persoon een zakelijk recht op heeft.
        :param TypeGerechtigdeEnum zakelijk_gerechtigde__type: Een typering van het recht dat de zakelijkgerechtigde heeft op de Kadastraal Onroerende Zaak. Door het gebruik van deze query-parameter worden Kadastraal Onroerende Zaken geretourneerd waar een recht op rust van het opgegeven type.
        :param str postcode: De postcode van het adres van de objectlocatie van de kadastraal onroerende zaak
        :param int huisnummer: Het huisnummer van het adres van de objectlocatie van de kadastraal onroerende zaak
        :param str huisletter: De huisletter van het adres van de objectlocatie van de kadastraal onroerende zaak
        :param str huisnummertoevoeging: De huisnummertoevoeging van het adres van de objectlocatie van de kadastraal onroerende zaak
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KadastraalOnroerendeZaakHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept_crs',
            'expand',
            'fields',
            'kadastrale_aanduiding',
            'burgerservicenummer',
            'persoon__identificatie',
            'zakelijk_gerechtigde__type',
            'postcode',
            'huisnummer',
            'huisletter',
            'huisnummertoevoeging'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kadastraal_onroerende_zaken" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'kadastrale_aanduiding' in local_var_params and not re.search(r'^([a-zA-Z0-9\'][a-zA-Z0-9\' ,-]*[a-zA-Z0-9]) ([A-IK-Z]{1,2}) ([1-9][0-9]{0,4})( A[1-9][0-9]{0,3})?$', local_var_params['kadastrale_aanduiding']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `kadastrale_aanduiding` when calling `get_kadastraal_onroerende_zaken`, must conform to the pattern `/^([a-zA-Z0-9'][a-zA-Z0-9' ,-]*[a-zA-Z0-9]) ([A-IK-Z]{1,2}) ([1-9][0-9]{0,4})( A[1-9][0-9]{0,3})?$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_kadastraal_onroerende_zaken`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'postcode' in local_var_params and not re.search(r'^[1-9][0-9][0-9][0-9][A-Z][A-Z]$', local_var_params['postcode']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `postcode` when calling `get_kadastraal_onroerende_zaken`, must conform to the pattern `/^[1-9][0-9][0-9][0-9][A-Z][A-Z]$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'huisnummer' in local_var_params and local_var_params['huisnummer'] > 99999:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `huisnummer` when calling `get_kadastraal_onroerende_zaken`, must be a value less than or equal to `99999`")  # noqa: E501
        if self.api_client.client_side_validation and 'huisnummer' in local_var_params and local_var_params['huisnummer'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `huisnummer` when calling `get_kadastraal_onroerende_zaken`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'huisletter' in local_var_params and not re.search(r'^[a-zA-Z]$', local_var_params['huisletter']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `huisletter` when calling `get_kadastraal_onroerende_zaken`, must conform to the pattern `/^[a-zA-Z]$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'huisnummertoevoeging' in local_var_params and not re.search(r'^([a-z,A-Z,0-9]){1,4}$', local_var_params['huisnummertoevoeging']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `huisnummertoevoeging` when calling `get_kadastraal_onroerende_zaken`, must conform to the pattern `/^([a-z,A-Z,0-9]){1,4}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params and local_var_params['expand'] is not None:  # noqa: E501
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'kadastrale_aanduiding' in local_var_params and local_var_params['kadastrale_aanduiding'] is not None:  # noqa: E501
            query_params.append(('kadastraleAanduiding', local_var_params['kadastrale_aanduiding']))  # noqa: E501
        if 'burgerservicenummer' in local_var_params and local_var_params['burgerservicenummer'] is not None:  # noqa: E501
            query_params.append(('burgerservicenummer', local_var_params['burgerservicenummer']))  # noqa: E501
        if 'persoon__identificatie' in local_var_params and local_var_params['persoon__identificatie'] is not None:  # noqa: E501
            query_params.append(('persoon__identificatie', local_var_params['persoon__identificatie']))  # noqa: E501
        if 'zakelijk_gerechtigde__type' in local_var_params and local_var_params['zakelijk_gerechtigde__type'] is not None:  # noqa: E501
            query_params.append(('zakelijkGerechtigde__type', local_var_params['zakelijk_gerechtigde__type']))  # noqa: E501
        if 'postcode' in local_var_params and local_var_params['postcode'] is not None:  # noqa: E501
            query_params.append(('postcode', local_var_params['postcode']))  # noqa: E501
        if 'huisnummer' in local_var_params and local_var_params['huisnummer'] is not None:  # noqa: E501
            query_params.append(('huisnummer', local_var_params['huisnummer']))  # noqa: E501
        if 'huisletter' in local_var_params and local_var_params['huisletter'] is not None:  # noqa: E501
            query_params.append(('huisletter', local_var_params['huisletter']))  # noqa: E501
        if 'huisnummertoevoeging' in local_var_params and local_var_params['huisnummertoevoeging'] is not None:  # noqa: E501
            query_params.append(('huisnummertoevoeging', local_var_params['huisnummertoevoeging']))  # noqa: E501

        header_params = {}
        if 'accept_crs' in local_var_params:
            header_params['Accept-Crs'] = local_var_params['accept_crs']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/kadastraalonroerendezaken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KadastraalOnroerendeZaakHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
